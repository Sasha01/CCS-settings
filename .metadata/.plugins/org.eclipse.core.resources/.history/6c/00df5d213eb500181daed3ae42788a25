/*
 * FlashDv.c
 *
 *  Created on: Feb 24, 2018
 *      Author: Sasha
 */

#include "FlashDv.h"
#include "../Warnings.h"

static const uint8_t CurrentFile[] = "FlashDv.c";

const uint32_t endFlashAddr = 0x0001FFFF;
const uint32_t flashBufferSize = 32 * sizeof(int);

static void writeWord(const uint32_t data, const uint32_t addr);
static void readWord(uint32_t *const data, const uint32_t addr);
static void write32Words(const uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr);
static void read32Words(uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr);
static void clearFlashRegisters();

/*
 * static void writeWord(const uint32_t data, const uint32_t addr)
 *
 * Write one word (4 bytes) to flash
 *
 * Parameters:
 * data - data to be written
 * addr - address to be written to (between 0x00000000 and 0x0001FFFF)
 *
 */
static void writeWord(const uint32_t data, const uint32_t addr)
{
    const uint32_t bootKeyMask = (1 << 4u);
    const uint32_t fmcWriteMask = (1 << 4u);
    const uint32_t addrValidMask = ~0xFFFFFFFC; // only write to address divisible by 4
    const uint16_t key1 = 0x71D5u;
    const uint16_t key2 = 0xA442u;

    if(((addr + sizeof(uint32_t)) <= endFlashAddr) &&
       ((addr & addrValidMask) == 0))
    {
        FLASH_CTRL->FMA = addr; // set the address
        FLASH_CTRL->FMD = data; // set the data
        // write the key, depending on the key value in BOOTCFG <- this will start the writing to flash
        if ((FLASH_CTRL->BOOTCFG & bootKeyMask) == 0)
        {
            FLASH_CTRL->FMC |= ((key1 << 16u) | 1);
        }
        else
        {
            FLASH_CTRL->FMC |= ((key2 << 16u) | 1);
        }
        while ((FLASH_CTRL->FMC & fmcWriteMask) != 0)
        {
            // wait until the "write" bit is cleared
        }
    }
    else
    {
        // TODO: invalid address
    }
    clearFlashRegisters();
}

/*
 * static void readWord(uint32_t *const data, const uint32_t addr)
 *
 * Reads one word (4 bytes) from flash
 *
 * Parameters:
 * *data - pointer to destination address
 * addr - address to the data to be read (between 0x00000000 and 0x0001FFFF)
 *
 * Return:
 * -
 *
 */
static void readWord(uint32_t *const data, const uint32_t addr)
{
    if(addr <= endFlashAddr)
    {
        *data = *(uint32_t*)addr;
    }
    else
    {
        // TODO: invalid address
    }
}

/*
 * static void write32Words(const uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr)
 *
 * Writes 32 words (32 * 4 bytes) to flash
 *
 * Parameters:
 * *data - pointer to data to be written
 * sizeOfData - used for checking; must be 128 bytes
 * addr - flash address where to write (between 0x00000000 and (0x0001FFFF - 128))
 *
 * Return:
 * -
 */
static void write32Words(const uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr)
{
    const uint32_t bootKeyMask = (1 << 4u);
    const uint32_t fmcWriteMask = (1 << 4u);
    const uint32_t addrValidMask = ~0xFFFFFF80; // only write to address divisible by 128 = 4 * 32
    const uint16_t key1 = 0x71D5u;
    const uint16_t key2 = 0xA442u;

    if((addr + sizeOfData <= endFlashAddr) &&
       (sizeOfData == flashBufferSize) &&
       ((addr & addrValidMask) == 0))
    {
        const uint32_t baseFWBNaddress = (uint32_t)&FLASH_CTRL->FWBN;  // avoid compiler warning

        memcpy((void*)baseFWBNaddress, data, sizeOfData); // set the data to be written
        FLASH_CTRL->FMA = addr; // set the address

        // write the key, depending on the key value in BOOTCFG <- this will start the writing to flash
        if ((FLASH_CTRL->BOOTCFG & bootKeyMask) == 0)
        {
            FLASH_CTRL->FMC2 |= ((key1 << 16u) | 1);
        }
        else
        {
            FLASH_CTRL->FMC2 |= ((key2 << 16u) | 1);
        }
        while ((FLASH_CTRL->FMC2 & fmcWriteMask) != 0)
        {
            // wait until the "write" bit is cleared
        }
    }
    else
    {
        // TODO: invalid address
    }
    clearFlashRegisters();
}

/*
 * static void read32Words(uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr)
 *
 * Reads 32 words (32 * 4 bytes) from flash
 *
 * Parameters:
 * *data - pointer to destination data
 * sizeOfData - used for checking; must be 128 bytes
 * addr - flash address where to read from (between 0x00000000 and (0x0001FFFF - 128))
 *
 * Return:
 * -
 */
static void read32Words(uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr)
{
    if((addr + sizeOfData <= endFlashAddr) &&
       (sizeOfData == flashBufferSize))
    {
        memcpy(data, (uint32_t*)addr, sizeOfData);
    }
    else
    {
        // TODO: invalid address
    }
}

/*
 * static void clearFlashRegisters()
 *
 * Clears the registers used for writing in the flash:
 * FLASH_CTRL->FMA
 * FLASH_CTRL->FMD
 * FLASH_CTRL->FMC
 * FLASH_CTRL->FMC2
 * FLASH_CTRL->FWBN
 *
 * Parameters:
 * -
 *
 * Return:
 * -
 */
static void clearFlashRegisters()
{
    const uint32_t baseFWBNaddress = (uint32_t)&FLASH_CTRL->FWBN;

    memset((void*)baseFWBNaddress, 0xFF, flashBufferSize); // set the data to be written
    FLASH_CTRL->FMA = 0;
    FLASH_CTRL->FMD = 0;
    FLASH_CTRL->FMC = 0;
    FLASH_CTRL->FMC2 = 0;
}

/*
 * void FlashDv_writeData(const uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr)
 *
 * Writes 32 words (32 * 4 bytes) to flash
 *
 * Parameters:
 * *data - pointer to data to be written
 * sizeOfData - used for checking; must be 128 bytes
 * addr - flash address where to write (between 0x00000000 and (0x0001FFFF - 128))
 *
 * Return:
 * -
 */
void FlashDv_writeData(const uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr)
{
    uint32_t tempSize = sizeOfData;
    uint32_t tempAddr = addr;
    uint32_t index = 0;

    while (tempSize >= flashBufferSize)
    {
        write32Words((data + index), flashBufferSize, tempAddr);
        tempSize -= flashBufferSize;
        index += (flashBufferSize / sizeof(int));
        tempAddr += flashBufferSize;
    }
    while (tempSize >= sizeof(int))
    {
        writeWord(*(data + index), tempAddr);
        tempSize -= sizeof(int);
        index++;
        tempAddr += sizeof(int);
    }
}

void FlashDv_readData(uint32_t *const data, const uint32_t sizeOfData, const uint32_t addr)
{
    uint32_t tempSize = sizeOfData;
    uint32_t tempAddr = addr;
    uint32_t index = 0;
    while (tempSize >= flashBufferSize)
    {
        read32Words((data + index), flashBufferSize, tempAddr);
        tempSize -= flashBufferSize;
        index += (flashBufferSize / sizeof(int));
        tempAddr += flashBufferSize;
    }
    while (tempSize >= sizeof(int))
    {
        readWord((data + index), tempAddr);
        tempSize -= sizeof(int);
        index++;
        tempAddr += sizeof(int);
    }
}
